import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,d as s}from"./app-DE4dwCYR.js";const i={},t=s(`<h1 id="rn和kotlin语言隔离怎么解决" tabindex="-1"><a class="header-anchor" href="#rn和kotlin语言隔离怎么解决"><span>RN和Kotlin语言隔离怎么解决</span></a></h1><p>React Native (RN) 使用 JavaScript 来编写应用逻辑，但它能够调用 Android 端的原生代码（包括 Kotlin 编写的代码）。这是通过 React Native 的桥接（Bridge）机制实现的。这个机制允许 JavaScript 与原生代码进行通信，互相调用函数。以下是这个过程的详细解释，包括相关的原理和示例代码。</p><h3 id="_1-react-native-的桥接机制" tabindex="-1"><a class="header-anchor" href="#_1-react-native-的桥接机制"><span>1. <strong>React Native 的桥接机制</strong></span></a></h3><p>React Native 中，JavaScript 和原生代码（无论是 Java、Kotlin 还是 Objective-C、Swift）之间的通信是通过一种称为 “Bridge” 的机制来实现的。Bridge 的核心工作是将 JavaScript 中的数据和操作转换为原生代码能够理解的形式，反之亦然。</p><h4 id="_1-1-javascript-调用原生代码" tabindex="-1"><a class="header-anchor" href="#_1-1-javascript-调用原生代码"><span>1.1 JavaScript 调用原生代码</span></a></h4><p>当 JavaScript 代码需要调用原生功能（比如摄像头、GPS 等），它会通过 Bridge 发送一个请求。这些请求会被传递给原生代码中的一个模块，该模块通常用 Kotlin 或 Java 编写。</p><h4 id="_1-2-原生代码调用-javascript" tabindex="-1"><a class="header-anchor" href="#_1-2-原生代码调用-javascript"><span>1.2 原生代码调用 JavaScript</span></a></h4><p>原生代码也可以通过 Bridge 发送事件或数据回到 JavaScript 层，这样 JavaScript 可以处理原生事件（例如按钮点击、传感器数据等）。</p><h3 id="_2-react-native-调用-kotlin-原生代码的实现" tabindex="-1"><a class="header-anchor" href="#_2-react-native-调用-kotlin-原生代码的实现"><span>2. <strong>React Native 调用 Kotlin 原生代码的实现</strong></span></a></h3><h4 id="_2-1-创建-kotlin-原生模块" tabindex="-1"><a class="header-anchor" href="#_2-1-创建-kotlin-原生模块"><span>2.1 创建 Kotlin 原生模块</span></a></h4><p>首先，我们需要在 Android 项目中创建一个 Kotlin 类，并使其成为一个可以被 React Native 调用的模块。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码package com.example.myapp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactApplicationContext</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactContextBaseJavaModule</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactMethod</span></span>
<span class="line"><span>import com.facebook.react.bridge.Promise</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MyKotlinModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun getName(): String {</span></span>
<span class="line"><span>        return &quot;MyKotlinModule&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ReactMethod</span></span>
<span class="line"><span>    fun sayHello(name: String, promise: Promise) {</span></span>
<span class="line"><span>        val greeting = &quot;Hello, $name!&quot;</span></span>
<span class="line"><span>        promise.resolve(greeting)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个名为 <code>MyKotlinModule</code> 的类，它继承了 <code>ReactContextBaseJavaModule</code>，这是创建原生模块的标准做法。我们在这个模块中定义了一个 <code>sayHello</code> 方法，该方法接收一个字符串并返回一个包含问候语的字符串。</p><h4 id="_2-2-注册-kotlin-模块" tabindex="-1"><a class="header-anchor" href="#_2-2-注册-kotlin-模块"><span>2.2 注册 Kotlin 模块</span></a></h4><p>接下来，我们需要在应用的 <code>ReactPackage</code> 中注册这个模块，以便 React Native 可以找到并使用它。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码package com.example.myapp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.facebook.react.ReactPackage</span></span>
<span class="line"><span>import com.facebook.react.bridge.NativeModule</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactApplicationContext</span></span>
<span class="line"><span>import com.facebook.react.uimanager.ViewManager</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MyAppPackage : ReactPackage {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun createNativeModules(reactContext: ReactApplicationContext): List&lt;NativeModule&gt; {</span></span>
<span class="line"><span>        return listOf(MyKotlinModule(reactContext))</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun createViewManagers(reactContext: ReactApplicationContext): List&lt;ViewManager&lt;*, *&gt;&gt; {</span></span>
<span class="line"><span>        return emptyList()</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>MyAppPackage</code> 中，我们通过 <code>createNativeModules</code> 方法将 <code>MyKotlinModule</code> 模块注册到 React Native 的模块列表中。</p><h4 id="_2-3-配置-mainapplication" tabindex="-1"><a class="header-anchor" href="#_2-3-配置-mainapplication"><span>2.3 配置 <code>MainApplication</code></span></a></h4><p>在 Android 项目的 <code>MainApplication</code> 类中，我们需要确保 <code>MyAppPackage</code> 被添加到应用的包列表中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码package com.example.myapp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import android.app.Application</span></span>
<span class="line"><span>import com.facebook.react.ReactApplication</span></span>
<span class="line"><span>import com.facebook.react.ReactNativeHost</span></span>
<span class="line"><span>import com.facebook.react.ReactPackage</span></span>
<span class="line"><span>import com.facebook.react.shell.MainReactPackage</span></span>
<span class="line"><span>import java.util.Arrays</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MainApplication : Application(), ReactApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private val mReactNativeHost: ReactNativeHost = object : ReactNativeHost(this) {</span></span>
<span class="line"><span>        override fun getPackages(): List&lt;ReactPackage&gt; {</span></span>
<span class="line"><span>            return Arrays.asList(</span></span>
<span class="line"><span>                MainReactPackage(),</span></span>
<span class="line"><span>                MyAppPackage()  // 添加我们自定义的包</span></span>
<span class="line"><span>            )</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        override fun getJSMainModuleName(): String {</span></span>
<span class="line"><span>            return &quot;index&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun getReactNativeHost(): ReactNativeHost {</span></span>
<span class="line"><span>        return mReactNativeHost</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-在-javascript-中调用-kotlin-方法" tabindex="-1"><a class="header-anchor" href="#_2-4-在-javascript-中调用-kotlin-方法"><span>2.4 在 JavaScript 中调用 Kotlin 方法</span></a></h4><p>最后，在 JavaScript 中，我们可以像使用其他 JavaScript 函数一样调用这个原生模块。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>javascript复制代码import { NativeModules } from &#39;react-native&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const { MyKotlinModule } = NativeModules;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MyKotlinModule.sayHello(&#39;React Native User&#39;)</span></span>
<span class="line"><span>  .then(greeting =&gt; {</span></span>
<span class="line"><span>    console.log(greeting);  // 输出：Hello, React Native User!</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  .catch(error =&gt; {</span></span>
<span class="line"><span>    console.error(error);</span></span>
<span class="line"><span>  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们导入了 <code>NativeModules</code>，并通过它访问 <code>MyKotlinModule</code>。我们调用 <code>sayHello</code> 方法，并处理其返回的 Promise。</p><h3 id="_3-底层原理分析" tabindex="-1"><a class="header-anchor" href="#_3-底层原理分析"><span>3. <strong>底层原理分析</strong></span></a></h3><ul><li><strong>Bridge 通信</strong>：当 JavaScript 调用 <code>MyKotlinModule.sayHello</code> 方法时，React Native 的 Bridge 将调用传递到原生层。Bridge 将 JavaScript 的调用参数（如字符串 <code>React Native User</code>）转换为原生格式，并在 Kotlin 代码中执行该方法。</li><li><strong>异步执行</strong>：React Native 的通信通常是异步的，JavaScript 线程不会被阻塞。Kotlin 的 <code>Promise</code> 对象用于处理方法执行的结果，并将结果传回 JavaScript 层。</li><li><strong>数据传输</strong>：数据在 JavaScript 和原生层之间通过序列化和反序列化进行传输。React Native 使用的 JavaScriptCore 或 Hermes 引擎负责处理 JavaScript 对象的序列化，而原生层则根据需要将其解析为 Kotlin 或 Java 对象。</li></ul><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4. <strong>总结</strong></span></a></h3><p>通过 React Native 的桥接机制，JavaScript 可以轻松调用 Kotlin 编写的原生代码，并且这两者之间的通信是通过异步的方式进行的，以确保应用的流畅性。React Native 框架通过这个桥接层，实现了跨平台的能力，让开发者在无需深入了解每个平台细节的情况下，也能高效地利用原生平台的强大功能。用原生平台的强大功能。</p>`,28),l=[t];function p(c,r){return e(),n("div",null,l)}const v=a(i,[["render",p],["__file","一些问题.html.vue"]]),m=JSON.parse('{"path":"/study/%E8%B7%A8%E7%AB%AF/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98.html","title":"RN和Kotlin语言隔离怎么解决","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-11T00:00:00.000Z","category":["跨端"],"tag":["react nativ","跨端"],"description":"RN和Kotlin语言隔离怎么解决 React Native (RN) 使用 JavaScript 来编写应用逻辑，但它能够调用 Android 端的原生代码（包括 Kotlin 编写的代码）。这是通过 React Native 的桥接（Bridge）机制实现的。这个机制允许 JavaScript 与原生代码进行通信，互相调用函数。以下是这个过程的详细...","head":[["meta",{"property":"og:url","content":"http://www.sxkjxy.cc/ron-blog/study/%E8%B7%A8%E7%AB%AF/%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"Ron 个人博客"}],["meta",{"property":"og:title","content":"RN和Kotlin语言隔离怎么解决"}],["meta",{"property":"og:description","content":"RN和Kotlin语言隔离怎么解决 React Native (RN) 使用 JavaScript 来编写应用逻辑，但它能够调用 Android 端的原生代码（包括 Kotlin 编写的代码）。这是通过 React Native 的桥接（Bridge）机制实现的。这个机制允许 JavaScript 与原生代码进行通信，互相调用函数。以下是这个过程的详细..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T01:18:52.000Z"}],["meta",{"property":"article:author","content":"Mr.Ron"}],["meta",{"property":"article:tag","content":"react nativ"}],["meta",{"property":"article:tag","content":"跨端"}],["meta",{"property":"article:published_time","content":"2022-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-23T01:18:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RN和Kotlin语言隔离怎么解决\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-23T01:18:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ron\\",\\"url\\":\\"https://github.com/wuwenlong12/ron-blog\\"}]}"]]},"headers":[{"level":3,"title":"1. React Native 的桥接机制","slug":"_1-react-native-的桥接机制","link":"#_1-react-native-的桥接机制","children":[]},{"level":3,"title":"2. React Native 调用 Kotlin 原生代码的实现","slug":"_2-react-native-调用-kotlin-原生代码的实现","link":"#_2-react-native-调用-kotlin-原生代码的实现","children":[]},{"level":3,"title":"3. 底层原理分析","slug":"_3-底层原理分析","link":"#_3-底层原理分析","children":[]},{"level":3,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1724375431000,"updatedTime":1724375932000,"contributors":[{"name":"WuWenlong","email":"7733141621@qq.com","commits":2}]},"readingTime":{"minutes":3.62,"words":1087},"filePathRelative":"study/跨端/一些问题.md","localizedDate":"2022年1月11日","excerpt":"\\n<p>React Native (RN) 使用 JavaScript 来编写应用逻辑，但它能够调用 Android 端的原生代码（包括 Kotlin 编写的代码）。这是通过 React Native 的桥接（Bridge）机制实现的。这个机制允许 JavaScript 与原生代码进行通信，互相调用函数。以下是这个过程的详细解释，包括相关的原理和示例代码。</p>\\n<h3>1. <strong>React Native 的桥接机制</strong></h3>\\n<p>React Native 中，JavaScript 和原生代码（无论是 Java、Kotlin 还是 Objective-C、Swift）之间的通信是通过一种称为 “Bridge” 的机制来实现的。Bridge 的核心工作是将 JavaScript 中的数据和操作转换为原生代码能够理解的形式，反之亦然。</p>","autoDesc":true}');export{v as comp,m as data};
