import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,d as n}from"./app-DE4dwCYR.js";const e={},l=n(`<h1 id="reactnative调用摄像头的详细工作原理与实现方式" tabindex="-1"><a class="header-anchor" href="#reactnative调用摄像头的详细工作原理与实现方式"><span>ReactNative调用摄像头的详细工作原理与实现方式</span></a></h1><h3 id="react-native-调用摄像头的详细工作原理与实现方式" tabindex="-1"><a class="header-anchor" href="#react-native-调用摄像头的详细工作原理与实现方式"><span>React Native 调用摄像头的详细工作原理与实现方式</span></a></h3><p>React Native 能够调用设备的原生功能（如摄像头、GPS、麦克风等），其核心是通过 <strong>桥接机制（Bridge）</strong> 连接 JavaScript 层和原生层。以下内容将详细解释 React Native 如何调用摄像头功能，包括使用第三方库、自定义原生模块、权限管理、性能优化等多个方面。</p><hr><h3 id="_1-react-native-架构概述" tabindex="-1"><a class="header-anchor" href="#_1-react-native-架构概述"><span>1. <strong>React Native 架构概述</strong></span></a></h3><p>React Native 是一个使用 JavaScript 编写跨平台应用的框架，底层依赖于原生代码来实现平台相关的功能。React Native 的架构包括以下三个主要层次：</p><ul><li><strong>JavaScript 层</strong>：包含 UI 逻辑、业务逻辑、状态管理等，由开发者编写。</li><li><strong>Bridge（桥接）层</strong>：负责 JavaScript 层与原生层的通信，将 JavaScript 的指令传递到原生层，并将原生层的结果反馈给 JavaScript 层。</li><li><strong>原生层</strong>：由 Android（Java/Kotlin）或 iOS（Objective-C/Swift）代码组成，负责处理与设备硬件直接相关的操作。</li></ul><h3 id="_2-调用摄像头的基本原理" tabindex="-1"><a class="header-anchor" href="#_2-调用摄像头的基本原理"><span>2. <strong>调用摄像头的基本原理</strong></span></a></h3><p>在 React Native 中，摄像头这样的硬件功能必须通过原生层实现，JavaScript 层通过调用已经封装好的原生模块来访问摄像头。核心步骤如下：</p><ol><li><strong>JavaScript 层发起请求</strong>：开发者在 JavaScript 中通过调用 API 发起摄像头的操作（例如打开摄像头预览、拍照、录视频等）。</li><li><strong>通过 Bridge 传递请求</strong>：JavaScript 层的请求通过桥接机制传递到原生层。</li><li><strong>原生层执行操作</strong>：原生层接收到请求后，使用平台的摄像头 API（如 Android 的 Camera2 API 或 iOS 的 AVFoundation）进行操作。</li><li><strong>结果回传给 JavaScript 层</strong>：原生层完成操作后，将结果通过 Bridge 回传给 JavaScript 层，供进一步处理。</li></ol><h3 id="_3-使用第三方库调用摄像头" tabindex="-1"><a class="header-anchor" href="#_3-使用第三方库调用摄像头"><span>3. <strong>使用第三方库调用摄像头</strong></span></a></h3><p>React Native 社区提供了许多封装好的第三方库，用于方便地调用摄像头功能。常见的库包括：</p><h4 id="_3-1-react-native-camera" tabindex="-1"><a class="header-anchor" href="#_3-1-react-native-camera"><span><strong>3.1 react-native-camera</strong></span></a></h4><p><code>react-native-camera</code> 是最常用的摄像头库之一，功能强大，支持拍照、录像、条形码扫描等。</p><p><strong>安装与配置：</strong></p><ul><li><p>安装库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-native-camera</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># or</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-native-camera</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置 Android 项目：</p><ol><li><p>添加摄像头权限到 <code>AndroidManifest.xml</code>：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uses-permission</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> android:name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;android.permission.CAMERA&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uses-permission</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> android:name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;android.permission.RECORD_AUDIO&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自动链接库（React Native 0.60+ 版本）： React Native 0.60+ 版本支持自动链接，因此一般不需要手动链接库。</p></li></ol></li><li><p>在 JavaScript 中使用摄像头：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">RNCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-native-camera&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">View</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">TouchableOpacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-native&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CameraComponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> cameraRef</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> takePicture</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">cameraRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">quality</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">base64</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> data</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> cameraRef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">takePictureAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 打印图片 URI</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">View</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> style</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">={{ flex: 1 }}&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">      &lt;RNCamera</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ref</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">cameraRef</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        style</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">={{ flex: 1 }}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">RNCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Constants</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">back</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        flashMode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">RNCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Constants</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FlashMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TouchableOpacity</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> onPress</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">takePicture</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Take Picture&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TouchableOpacity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    &lt;/</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">View</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CameraComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-2-react-native-image-picker" tabindex="-1"><a class="header-anchor" href="#_3-2-react-native-image-picker"><span><strong>3.2 react-native-image-picker</strong></span></a></h4><p><code>react-native-image-picker</code> 是另一种常用库，主要用于从相机或相册中选择图片或视频。它提供了简化的接口，易于集成。</p><p><strong>安装与配置：</strong></p><ul><li><p>安装库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-native-image-picker</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># or</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-native-image-picker</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 JavaScript 中使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">jsx复制代码import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> React</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">View</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-native&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">launchCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-native-image-picker&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CameraPickerComponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> openCamera</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      mediaType</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;photo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      cameraType</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;back&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    launchCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">didCancel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;User cancelled image picker&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">errorCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ImagePicker Error: &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">errorMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">assets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);  </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 打印图片 URI</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">View</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> title</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Open Camera&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> onPress</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">openCamera</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">View</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CameraPickerComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-自定义原生模块" tabindex="-1"><a class="header-anchor" href="#_4-自定义原生模块"><span>4. <strong>自定义原生模块</strong></span></a></h3><p>如果社区库不能满足特定需求，开发者可以创建自定义的原生模块，直接与设备 API 交互。</p><h4 id="_4-1-创建原生模块-android-示例" tabindex="-1"><a class="header-anchor" href="#_4-1-创建原生模块-android-示例"><span><strong>4.1 创建原生模块（Android 示例）</strong></span></a></h4><ol><li><p><strong>创建 Java 类</strong>：在 Android 项目中创建一个新的 Java 类，继承 <code>ReactContextBaseJavaModule</code>。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java复制代码package com.example;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import android.content.Intent;</span></span>
<span class="line"><span>import android.provider.MediaStore;</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactApplicationContext;</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactContextBaseJavaModule;</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactMethod;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class MyCameraModule extends ReactContextBaseJavaModule {</span></span>
<span class="line"><span>    public MyCameraModule(ReactApplicationContext reactContext) {</span></span>
<span class="line"><span>        super(reactContext);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String getName() {</span></span>
<span class="line"><span>        return &quot;MyCameraModule&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ReactMethod</span></span>
<span class="line"><span>    public void openCamera() {</span></span>
<span class="line"><span>        Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span></span>
<span class="line"><span>        getCurrentActivity().startActivityForResult(cameraIntent, 100);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>注册模块</strong>：在 <code>MainApplication.java</code> 中注册新创建的模块。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>java复制代码import com.example.MyCameraModule;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Override</span></span>
<span class="line"><span>protected List&lt;ReactPackage&gt; getPackages() {</span></span>
<span class="line"><span>    return Arrays.&lt;ReactPackage&gt;asList(</span></span>
<span class="line"><span>        new MainReactPackage(),</span></span>
<span class="line"><span>        new MyCameraPackage()  // 注册自定义模块</span></span>
<span class="line"><span>    );</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在 JavaScript 中使用原生模块</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>javascript复制代码import { NativeModules } from &#39;react-native&#39;;</span></span>
<span class="line"><span>const { MyCameraModule } = NativeModules;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const openCamera = () =&gt; {</span></span>
<span class="line"><span>  MyCameraModule.openCamera();</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default openCamera;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>你可以使用 Kotlin 编写原生 Android 代码，然后在 React Native 中调用这些代码。Kotlin 是现代 Android 开发的推荐语言，支持更简洁的语法和更强的类型安全性，且完全兼容 Java。因此，用 Kotlin 编写 React Native 的原生模块是完全可行的。</p><h3 id="_5-使用-kotlin-编写原生模块的步骤" tabindex="-1"><a class="header-anchor" href="#_5-使用-kotlin-编写原生模块的步骤"><span>5.使用 Kotlin 编写原生模块的步骤</span></a></h3><h4 id="_1-创建-kotlin-原生模块" tabindex="-1"><a class="header-anchor" href="#_1-创建-kotlin-原生模块"><span>1. <strong>创建 Kotlin 原生模块</strong></span></a></h4><p>首先，你需要创建一个新的 Kotlin 类来定义你的原生模块。这个类需要继承 <code>ReactContextBaseJavaModule</code>，并实现相应的方法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码package com.example</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactApplicationContext</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactContextBaseJavaModule</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactMethod</span></span>
<span class="line"><span>import android.content.Intent</span></span>
<span class="line"><span>import android.provider.MediaStore</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MyCameraModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaModule(reactContext) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun getName(): String {</span></span>
<span class="line"><span>        return &quot;MyCameraModule&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @ReactMethod</span></span>
<span class="line"><span>    fun openCamera() {</span></span>
<span class="line"><span>        val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)</span></span>
<span class="line"><span>        currentActivity?.startActivityForResult(cameraIntent, 100)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>getName()</strong>：返回模块的名称，这个名称在 JavaScript 中引用时使用。</li><li><strong>@ReactMethod</strong>：标注的方法将暴露给 JavaScript 层调用。</li></ul><h4 id="_2-注册-kotlin-模块" tabindex="-1"><a class="header-anchor" href="#_2-注册-kotlin-模块"><span>2. <strong>注册 Kotlin 模块</strong></span></a></h4><p>你需要在 <code>MainApplication.kt</code> 或 <code>MainApplication.java</code> 中注册这个模块，以便 React Native 可以识别和使用它。</p><p>如果你使用的是 <code>MainApplication.kt</code>（Kotlin）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码import com.example.MyCameraModule</span></span>
<span class="line"><span>import com.facebook.react.ReactPackage</span></span>
<span class="line"><span>import com.facebook.react.shell.MainReactPackage</span></span>
<span class="line"><span>import com.facebook.react.ReactNativeHost</span></span>
<span class="line"><span>import com.facebook.react.ReactApplication</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MainApplication : Application(), ReactApplication {</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    private val mReactNativeHost = object : ReactNativeHost(this) {</span></span>
<span class="line"><span>        override fun getPackages(): List&lt;ReactPackage&gt; {</span></span>
<span class="line"><span>            return listOf(</span></span>
<span class="line"><span>                MainReactPackage(),</span></span>
<span class="line"><span>                MyCameraPackage() // 注册自定义模块</span></span>
<span class="line"><span>            )</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        // 其他配置...</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun getReactNativeHost(): ReactNativeHost {</span></span>
<span class="line"><span>        return mReactNativeHost</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>MyCameraPackage</code> 是你需要创建的 <code>ReactPackage</code> 的实现，它负责将 <code>MyCameraModule</code> 提供给 React Native。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码package com.example</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.facebook.react.ReactPackage</span></span>
<span class="line"><span>import com.facebook.react.bridge.NativeModule</span></span>
<span class="line"><span>import com.facebook.react.bridge.ReactApplicationContext</span></span>
<span class="line"><span>import com.facebook.react.uimanager.ViewManager</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class MyCameraPackage : ReactPackage {</span></span>
<span class="line"><span>    override fun createNativeModules(reactContext: ReactApplicationContext): List&lt;NativeModule&gt; {</span></span>
<span class="line"><span>        return listOf(MyCameraModule(reactContext))</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    override fun createViewManagers(reactContext: ReactApplicationContext): List&lt;ViewManager&lt;*, *&gt;&gt; {</span></span>
<span class="line"><span>        return emptyList()</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-在-javascript-中调用-kotlin-模块" tabindex="-1"><a class="header-anchor" href="#_3-在-javascript-中调用-kotlin-模块"><span>3. <strong>在 JavaScript 中调用 Kotlin 模块</strong></span></a></h4><p>一旦你完成了 Kotlin 模块的创建和注册，就可以在 JavaScript 中调用这个模块。首先，从 <code>NativeModules</code> 中获取模块引用，然后调用暴露的方法。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>javascript复制代码import { NativeModules } from &#39;react-native&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const { MyCameraModule } = NativeModules;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const openCamera = () =&gt; {</span></span>
<span class="line"><span>  MyCameraModule.openCamera();</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default openCamera;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-处理回调和异步任务" tabindex="-1"><a class="header-anchor" href="#_4-处理回调和异步任务"><span>4. <strong>处理回调和异步任务</strong></span></a></h4><p>在 Kotlin 中，你可以使用 <code>Callback</code> 或 <code>Promise</code> 来处理异步操作，并将结果返回给 JavaScript 层。例如，如果你想在拍照后将结果返回，可以使用 <code>Promise</code>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kotlin复制代码import com.facebook.react.bridge.Promise</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@ReactMethod</span></span>
<span class="line"><span>fun takePicture(promise: Promise) {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)</span></span>
<span class="line"><span>        currentActivity?.startActivityForResult(cameraIntent, 100)</span></span>
<span class="line"><span>        promise.resolve(&quot;Picture taken successfully&quot;)</span></span>
<span class="line"><span>    } catch (e: Exception) {</span></span>
<span class="line"><span>        promise.reject(&quot;Error&quot;, e.message)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JavaScript 层，可以像这样处理返回值：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>javascript复制代码MyCameraModule.takePicture()</span></span>
<span class="line"><span>  .then(result =&gt; {</span></span>
<span class="line"><span>    console.log(result);  // &quot;Picture taken successfully&quot;</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>  .catch(error =&gt; {</span></span>
<span class="line"><span>    console.error(error);</span></span>
<span class="line"><span>  });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-自定义模块的好处" tabindex="-1"><a class="header-anchor" href="#_4-2-自定义模块的好处"><span>4.2 自定义模块的好处**</span></a></h4><ul><li><strong>灵活性</strong>：开发者可以完全控制原生代码的行为，满足复杂或特定的需求。</li><li><strong>性能优化</strong>：可以避免桥接通信的开销，直接利用平台 API 的高性能。</li></ul><h3 id="_6-权限管理" tabindex="-1"><a class="header-anchor" href="#_6-权限管理"><span>6. <strong>权限管理</strong></span></a></h3><p>调用摄像头、麦克风等硬件功能时，应用必须请求相应的权限。</p><ul><li><p><strong>Android 权限</strong>：在 <code>AndroidManifest.xml</code> 中声明权限。</p></li><li><p>iOS 权限</p><p>：在</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Info.plist</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>文件中声明权限。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;NSCameraUsageDescription&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;We need access to your camera&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>在运行时，还需要检查和请求权限。例如，使用 <code>react-native-permissions</code> 库可以方便地管理权限。</p><h3 id="_7-事件与回调" tabindex="-1"><a class="header-anchor" href="#_7-事件与回调"><span>7. <strong>事件与回调</strong></span></a></h3><p>当摄像头操作完成时，React Native 会将结果通过回调或事件机制传递回 JavaScript 层。</p><ul><li><strong>事件监听</strong>：通过 <code>EventEmitter</code> 或回调函数在 JavaScript 层处理原生模块的事件。</li><li><strong>Promise</strong> 或 <strong>Callback</strong>：原生模块可以返回 <code>Promise</code> 或接受 <code>Callback</code>，以便处理异步操作。</li></ul><h3 id="_8-性能优化" tabindex="-1"><a class="header-anchor" href="#_8-性能优化"><span>8. <strong>性能优化</strong></span></a></h3><p>调用摄像头等复杂功能时，应考虑以下性能优化策略：</p><ul><li><strong>批量操作</strong>：将多个 UI 更新操作合并，减少对主线程的压力。</li><li><strong>异步处理</strong>：避免在主线程执行耗时操作，尽量将重计算、数据处理放在后台线程。</li><li><strong>减少桥接通信</strong>：尽量减少频繁的 JavaScript 与原生之间的通信，避免不必要的性能开销。</li></ul>`,56),t=[l];function p(h,r){return a(),i("div",null,t)}const c=s(e,[["render",p],["__file","ReactNative调用摄像头的详细工作原理与实现方式.html.vue"]]),o=JSON.parse('{"path":"/study/%E8%B7%A8%E7%AB%AF/ReactNative%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E8%AF%A6%E7%BB%86%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html","title":"ReactNative调用摄像头的详细工作原理与实现方式","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-11T00:00:00.000Z","category":["跨端"],"tag":["react native","跨端","性能优化"],"description":"ReactNative调用摄像头的详细工作原理与实现方式 React Native 调用摄像头的详细工作原理与实现方式 React Native 能够调用设备的原生功能（如摄像头、GPS、麦克风等），其核心是通过 桥接机制（Bridge） 连接 JavaScript 层和原生层。以下内容将详细解释 React Native 如何调用摄像头功能，包括使用...","head":[["meta",{"property":"og:url","content":"http://www.sxkjxy.cc/ron-blog/study/%E8%B7%A8%E7%AB%AF/ReactNative%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E8%AF%A6%E7%BB%86%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"Ron 个人博客"}],["meta",{"property":"og:title","content":"ReactNative调用摄像头的详细工作原理与实现方式"}],["meta",{"property":"og:description","content":"ReactNative调用摄像头的详细工作原理与实现方式 React Native 调用摄像头的详细工作原理与实现方式 React Native 能够调用设备的原生功能（如摄像头、GPS、麦克风等），其核心是通过 桥接机制（Bridge） 连接 JavaScript 层和原生层。以下内容将详细解释 React Native 如何调用摄像头功能，包括使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T01:10:31.000Z"}],["meta",{"property":"article:author","content":"Mr.Ron"}],["meta",{"property":"article:tag","content":"react native"}],["meta",{"property":"article:tag","content":"跨端"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:published_time","content":"2022-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-23T01:10:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ReactNative调用摄像头的详细工作原理与实现方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-23T01:10:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ron\\",\\"url\\":\\"https://github.com/wuwenlong12/ron-blog\\"}]}"]]},"headers":[{"level":3,"title":"React Native 调用摄像头的详细工作原理与实现方式","slug":"react-native-调用摄像头的详细工作原理与实现方式","link":"#react-native-调用摄像头的详细工作原理与实现方式","children":[]},{"level":3,"title":"1. React Native 架构概述","slug":"_1-react-native-架构概述","link":"#_1-react-native-架构概述","children":[]},{"level":3,"title":"2. 调用摄像头的基本原理","slug":"_2-调用摄像头的基本原理","link":"#_2-调用摄像头的基本原理","children":[]},{"level":3,"title":"3. 使用第三方库调用摄像头","slug":"_3-使用第三方库调用摄像头","link":"#_3-使用第三方库调用摄像头","children":[]},{"level":3,"title":"4. 自定义原生模块","slug":"_4-自定义原生模块","link":"#_4-自定义原生模块","children":[]},{"level":3,"title":"5.使用 Kotlin 编写原生模块的步骤","slug":"_5-使用-kotlin-编写原生模块的步骤","link":"#_5-使用-kotlin-编写原生模块的步骤","children":[]},{"level":3,"title":"6. 权限管理","slug":"_6-权限管理","link":"#_6-权限管理","children":[]},{"level":3,"title":"7. 事件与回调","slug":"_7-事件与回调","link":"#_7-事件与回调","children":[]},{"level":3,"title":"8. 性能优化","slug":"_8-性能优化","link":"#_8-性能优化","children":[]}],"git":{"createdTime":1724375431000,"updatedTime":1724375431000,"contributors":[{"name":"WuWenlong","email":"7733141621@qq.com","commits":1}]},"readingTime":{"minutes":6.7,"words":2011},"filePathRelative":"study/跨端/ReactNative调用摄像头的详细工作原理与实现方式.md","localizedDate":"2022年1月11日","excerpt":"\\n<h3>React Native 调用摄像头的详细工作原理与实现方式</h3>\\n<p>React Native 能够调用设备的原生功能（如摄像头、GPS、麦克风等），其核心是通过 <strong>桥接机制（Bridge）</strong> 连接 JavaScript 层和原生层。以下内容将详细解释 React Native 如何调用摄像头功能，包括使用第三方库、自定义原生模块、权限管理、性能优化等多个方面。</p>\\n<hr>\\n<h3>1. <strong>React Native 架构概述</strong></h3>\\n<p>React Native 是一个使用 JavaScript 编写跨平台应用的框架，底层依赖于原生代码来实现平台相关的功能。React Native 的架构包括以下三个主要层次：</p>","autoDesc":true}');export{c as comp,o as data};
