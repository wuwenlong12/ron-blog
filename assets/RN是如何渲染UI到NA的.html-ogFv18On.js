import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as n}from"./app-DE4dwCYR.js";const e={},t=n(`<h1 id="rn是如何渲染ui到na的" tabindex="-1"><a class="header-anchor" href="#rn是如何渲染ui到na的"><span>RN是如何渲染UI到NA的</span></a></h1><p>React Native 调用 Android 原生 UI 的过程主要涉及以下几个步骤和关键组件：</p><h3 id="_1-javascript-编写-ui" tabindex="-1"><a class="header-anchor" href="#_1-javascript-编写-ui"><span>1. <strong>JavaScript 编写 UI</strong></span></a></h3><p>在 React Native 中，开发者使用 JavaScript 来编写 UI 组件，通常使用 JSX 语法。例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>jsx复制代码import React from &#39;react&#39;;</span></span>
<span class="line"><span>import { View, Text, Button } from &#39;react-native&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const MyComponent = () =&gt; (</span></span>
<span class="line"><span>  &lt;View&gt;</span></span>
<span class="line"><span>    &lt;Text&gt;Hello, React Native!&lt;/Text&gt;</span></span>
<span class="line"><span>    &lt;Button title=&quot;Press Me&quot; onPress={() =&gt; alert(&#39;Button pressed!&#39;)} /&gt;</span></span>
<span class="line"><span>  &lt;/View&gt;</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default MyComponent;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>View</code>, <code>Text</code>, <code>Button</code> 都是 React Native 提供的跨平台组件，它们在 JavaScript 层面定义了 UI 结构。</p><h3 id="_2-bridge-桥接-机制" tabindex="-1"><a class="header-anchor" href="#_2-bridge-桥接-机制"><span>2. <strong>Bridge（桥接）机制</strong></span></a></h3><p>React Native 使用一个叫做 <strong>Bridge</strong> 的机制在 JavaScript 层和原生层之间进行通信。所有 UI 更新请求最终都会通过这个 Bridge 传递给原生层。</p><ul><li>JavaScript 层在 React 渲染过程中生成虚拟 DOM。</li><li>React Native 会比较新的虚拟 DOM 和上一次的虚拟 DOM，找出变化的部分（diff）。</li><li>这些变化被打包成一个更新批次，并通过 Bridge 发送到原生层。</li></ul><h3 id="_3-ui-manager" tabindex="-1"><a class="header-anchor" href="#_3-ui-manager"><span>3. <strong>UI Manager</strong></span></a></h3><p>原生层有一个称为 <strong>UI Manager</strong> 的模块，它接收来自 JavaScript 层的更新指令。UI Manager 负责：</p><ul><li>解析来自 JavaScript 的命令。</li><li>创建、更新、删除原生视图。</li><li>分发事件给 JavaScript 层（如点击事件等）。</li></ul><p>这些命令包括创建新的视图、更新已有视图的属性、删除视图等。UI Manager 是 React Native 在 Android 中负责管理视图生命周期的核心部分。</p><h3 id="_4-native-components-映射" tabindex="-1"><a class="header-anchor" href="#_4-native-components-映射"><span>4. <strong>Native Components 映射</strong></span></a></h3><p>React Native 提供了一些基本的跨平台组件，这些组件在不同的平台上被映射到相应的原生组件。例如：</p><ul><li><code>View</code> 被映射到 Android 的 <code>ViewGroup</code>。</li><li><code>Text</code> 被映射到 Android 的 <code>TextView</code>。</li><li><code>Image</code> 被映射到 Android 的 <code>ImageView</code>。</li></ul><p>当 JavaScript 层创建一个 <code>View</code> 组件时，React Native 会通过 Bridge 将创建 <code>View</code> 的命令传递给原生层的 UI Manager，UI Manager 再调用 Android 的 <code>ViewGroup</code> 来创建对应的视图。</p><h3 id="_5-主线程渲染" tabindex="-1"><a class="header-anchor" href="#_5-主线程渲染"><span>5. <strong>主线程渲染</strong></span></a></h3><p>Android 中的所有 UI 操作都必须在主线程（UI Thread）中执行。UI Manager 会确保所有的视图更新操作在主线程中执行。通过这种方式，React Native 将 JavaScript 层的指令翻译成具体的原生 UI 操作，并最终渲染到屏幕上。</p><h3 id="_6-自定义原生组件" tabindex="-1"><a class="header-anchor" href="#_6-自定义原生组件"><span>6. <strong>自定义原生组件</strong></span></a></h3><p>如果 React Native 提供的组件无法满足需求，开发者还可以编写自己的原生组件。步骤如下：</p><ul><li><strong>创建原生组件</strong>：在 Android 中创建一个自定义的 View 或者其他 UI 组件。</li><li><strong>导出到 React Native</strong>：通过创建一个 Java 类，继承 <code>SimpleViewManager</code> 或 <code>ViewGroupManager</code>，并实现相关方法。这个类负责将原生组件暴露给 React Native。</li><li><strong>在 JavaScript 中使用</strong>：使用 <code>requireNativeComponent</code> 导入自定义组件，然后像使用普通 React Native 组件一样在 JSX 中使用。</li></ul><p>例如，一个简单的自定义原生按钮可能这样实现：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyCustomButtonManager</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleViewManager</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Button</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;MyCustomButton&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Button</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createViewInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ThemedReactContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> reactContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Button</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> button</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(reactContext);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setOnClickListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> View.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OnClickListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">View</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">                // 自定义点击事件处理</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> button;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 JavaScript 中：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">requireNativeComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react-native&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> MyCustomButton</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> requireNativeComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;MyCustomButton&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> App</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyCustomButton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-事件的回传" tabindex="-1"><a class="header-anchor" href="#_7-事件的回传"><span>7. <strong>事件的回传</strong></span></a></h3><p>当原生组件中发生事件（例如用户点击了按钮），React Native 会通过桥接机制将这些事件通知 JavaScript 层。JavaScript 层可以注册事件处理函数来处理这些事件。</p><p>总结来说，React Native 调用 Android 原生 UI 的过程是通过将 JavaScript 编写的 UI 结构翻译成 Android 原生视图，借助 UI Manager 和 Bridge 机制在主线程中执行渲染操作，并通过事件回调实现与 JavaScript 层的交互。</p>`,29),l=[t];function p(r,h){return a(),s("div",null,l)}const k=i(e,[["render",p],["__file","RN是如何渲染UI到NA的.html.vue"]]),o=JSON.parse(`{"path":"/study/%E8%B7%A8%E7%AB%AF/RN%E6%98%AF%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93UI%E5%88%B0NA%E7%9A%84.html","title":"RN是如何渲染UI到NA的","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-11T00:00:00.000Z","category":["跨端"],"tag":["react native","跨端"],"description":"RN是如何渲染UI到NA的 React Native 调用 Android 原生 UI 的过程主要涉及以下几个步骤和关键组件： 1. JavaScript 编写 UI 在 React Native 中，开发者使用 JavaScript 来编写 UI 组件，通常使用 JSX 语法。例如： 这里的 View, Text, Button 都是 React N...","head":[["meta",{"property":"og:url","content":"http://www.sxkjxy.cc/ron-blog/study/%E8%B7%A8%E7%AB%AF/RN%E6%98%AF%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93UI%E5%88%B0NA%E7%9A%84.html"}],["meta",{"property":"og:site_name","content":"Ron 个人博客"}],["meta",{"property":"og:title","content":"RN是如何渲染UI到NA的"}],["meta",{"property":"og:description","content":"RN是如何渲染UI到NA的 React Native 调用 Android 原生 UI 的过程主要涉及以下几个步骤和关键组件： 1. JavaScript 编写 UI 在 React Native 中，开发者使用 JavaScript 来编写 UI 组件，通常使用 JSX 语法。例如： 这里的 View, Text, Button 都是 React N..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-23T01:10:31.000Z"}],["meta",{"property":"article:author","content":"Mr.Ron"}],["meta",{"property":"article:tag","content":"react native"}],["meta",{"property":"article:tag","content":"跨端"}],["meta",{"property":"article:published_time","content":"2022-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-23T01:10:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RN是如何渲染UI到NA的\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-23T01:10:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ron\\",\\"url\\":\\"https://github.com/wuwenlong12/ron-blog\\"}]}"]]},"headers":[{"level":3,"title":"1. JavaScript 编写 UI","slug":"_1-javascript-编写-ui","link":"#_1-javascript-编写-ui","children":[]},{"level":3,"title":"2. Bridge（桥接）机制","slug":"_2-bridge-桥接-机制","link":"#_2-bridge-桥接-机制","children":[]},{"level":3,"title":"3. UI Manager","slug":"_3-ui-manager","link":"#_3-ui-manager","children":[]},{"level":3,"title":"4. Native Components 映射","slug":"_4-native-components-映射","link":"#_4-native-components-映射","children":[]},{"level":3,"title":"5. 主线程渲染","slug":"_5-主线程渲染","link":"#_5-主线程渲染","children":[]},{"level":3,"title":"6. 自定义原生组件","slug":"_6-自定义原生组件","link":"#_6-自定义原生组件","children":[]},{"level":3,"title":"7. 事件的回传","slug":"_7-事件的回传","link":"#_7-事件的回传","children":[]}],"git":{"createdTime":1724375431000,"updatedTime":1724375431000,"contributors":[{"name":"WuWenlong","email":"7733141621@qq.com","commits":1}]},"readingTime":{"minutes":3.11,"words":933},"filePathRelative":"study/跨端/RN是如何渲染UI到NA的.md","localizedDate":"2022年1月11日","excerpt":"\\n<p>React Native 调用 Android 原生 UI 的过程主要涉及以下几个步骤和关键组件：</p>\\n<h3>1. <strong>JavaScript 编写 UI</strong></h3>\\n<p>在 React Native 中，开发者使用 JavaScript 来编写 UI 组件，通常使用 JSX 语法。例如：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>jsx复制代码import React from 'react';</span></span>\\n<span class=\\"line\\"><span>import { View, Text, Button } from 'react-native';</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>const MyComponent = () =&gt; (</span></span>\\n<span class=\\"line\\"><span>  &lt;View&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;Text&gt;Hello, React Native!&lt;/Text&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;Button title=\\"Press Me\\" onPress={() =&gt; alert('Button pressed!')} /&gt;</span></span>\\n<span class=\\"line\\"><span>  &lt;/View&gt;</span></span>\\n<span class=\\"line\\"><span>);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>export default MyComponent;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{k as comp,o as data};
