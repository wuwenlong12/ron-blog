import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,d as i}from"./app-DE4dwCYR.js";const a={},t=i(`<h1 id="express-ts-环境搭建" tabindex="-1"><a class="header-anchor" href="#express-ts-环境搭建"><span>express +TS 环境搭建</span></a></h1><h3 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言"><span>1. 前言</span></a></h3><p>作为前端开发人员而言，<code>ts</code>已经成为了一项必不可少的技能，类型检查可以帮助我们再开发时避免一些不必要的 bug，而且<code>ts</code>支持的类和装饰器等语法也更逼近后端语言，更适合服务器的开发。</p><p>本文将从零开始，搭建一个集成<code>ts</code>和<code>eslint</code>语法检查的<code>express</code>服务器。</p><h3 id="_2-初始化-express-框架" tabindex="-1"><a class="header-anchor" href="#_2-初始化-express-框架"><span>2. 初始化 express 框架</span></a></h3><p>我们可以使用官方提供的<code>express</code>生成器来快速生成<code>express</code>框架。</p><p>当然，<code>express</code>的初始化内容并不复杂，你也可以从一个<code>app.js</code>开始搭建自己喜欢的框架模式。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 使用express生成器之前必须全局安装过express-generator</span></span>
<span class="line"><span>$ npm install -g express-generator</span></span>
<span class="line"><span></span></span>
<span class="line"><span># --view后面是确定你使用哪种视图引擎，server是你工程的名称</span></span>
<span class="line"><span>$ express --view ejs server</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 生成的工程并不会默认给我们添加git，这里我们使用git init初始化一下</span></span>
<span class="line"><span>$ git init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始化完成后我们添加一个<code>.gitignore</code>文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>node_modules/</span></span>
<span class="line"><span>dist/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-添加-ts-支持" tabindex="-1"><a class="header-anchor" href="#_3-添加-ts-支持"><span>3. 添加 TS 支持</span></a></h3><h4 id="全局安装-ts" tabindex="-1"><a class="header-anchor" href="#全局安装-ts"><span>全局安装 TS</span></a></h4><p><code>ts</code>本身属于<code>js</code>的超集，<code>node</code>和浏览器并不认识，执行前需要先编译成<code>js</code>，所以没有全局安装过<code>ts</code>的需要先全局安装一下</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ npm install -g typescript</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="安装-express-类型依赖" tabindex="-1"><a class="header-anchor" href="#安装-express-类型依赖"><span>安装 express 类型依赖</span></a></h4><p><code>express</code>是基于<code>node</code>环境的，所以我们需要安装两个类型依赖，以获得相关<code>api</code>的类型提示</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ npm install @types/node --save-dev</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ npm install @types/express --save-dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-tsconfig-json-文件" tabindex="-1"><a class="header-anchor" href="#配置-tsconfig-json-文件"><span>配置 tsconfig.json 文件</span></a></h4><p>在项目根目录下新建<code>tsconfig.json</code>文件，<code>outDir</code>表示打包输出路径</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span>    &quot;target&quot;: &quot;es2016&quot;,</span></span>
<span class="line"><span>    &quot;module&quot;: &quot;commonjs&quot;,</span></span>
<span class="line"><span>    &quot;lib&quot;: [&quot;es2016&quot;,&quot;dom&quot;],</span></span>
<span class="line"><span>    &quot;outDir&quot;: &quot;./dist&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;exclude&quot;: [&quot;node_modules&quot;]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里如果包含了<code>include</code>或者<code>files</code>选项，将不会默认编译所有 ts 文件。</p><p>接下来我们可以把项目的所以<code>js</code>文件的后缀改为<code>.ts</code>，然后直接在命令行运行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ tsc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>默认会找到根目录下的<code>tsconfig.json</code>文件，按照配置帮我们进行编译，编译完成我们可以看到<code>dist</code>文件夹已经将所有<code>ts</code>文件编译成了<code>js</code>文件，而且保持了原来的目录结构。</p><p>接下来我们将目录下的其他资源也放入 dist 文件夹下，然后运行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ node ./dist/bin/www</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这时我们的服务已经可以正常启动了，但是在开发时如果每次运行都要进行<strong>编译 -&gt; 将资源文件移入 -&gt; 运行命令</strong>的流程，那也太繁琐了，所以接下来我们再添加一个第三方库<code>ts-node</code>。</p><h4 id="使用-ts-node-将-ts-文件编译在内存中" tabindex="-1"><a class="header-anchor" href="#使用-ts-node-将-ts-文件编译在内存中"><span>使用 ts-node 将 ts 文件编译在内存中</span></a></h4><p>在使用<code>ts-node</code>之前需要进行全局安装</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ npm install ts-node -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 用ts-node直接运行项目，这个库会将我们的ts文件编译成js文件保存在内存中进行引用</span></span>
<span class="line"><span>$ ts-node ./bin/www</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然<code>ts-node</code>可以帮我们直接运行 ts 文件，但在开发完成后部署在生产环境时，还是推荐使用<code>tsc</code>打包出来的<code>js</code>文件会更加稳定。</p><h4 id="使用-nodemon-进行热更新" tabindex="-1"><a class="header-anchor" href="#使用-nodemon-进行热更新"><span>使用 nodemon 进行热更新</span></a></h4><p>全局安装<code>nodemon</code></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ npm install nodemon -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 执行命令运行项目</span></span>
<span class="line"><span>$ nodemon -e ts --exec ts-node ./bin/www</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-e</code>：表示指定观察列表 (Specifying extension watch list)</p><p><code>--exec</code>：代表命令行形式执行命令</p><h4 id="配置-npm-脚本" tabindex="-1"><a class="header-anchor" href="#配置-npm-脚本"><span>配置 npm 脚本</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>  &quot;start&quot;: &quot;ts-node ./bin/www&quot;,</span></span>
<span class="line"><span>  &quot;dev&quot;: &quot;nodemon -e ts --exec ts-node ./bin/www&quot;,</span></span>
<span class="line"><span>  &quot;build&quot;: &quot;tsc&quot;,</span></span>
<span class="line"><span>  &quot;server&quot;: &quot;node ./dist/bin/www&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-配置-eslint" tabindex="-1"><a class="header-anchor" href="#_4-配置-eslint"><span>4. 配置 eslint</span></a></h3><h4 id="为什么不是-tslint" tabindex="-1"><a class="header-anchor" href="#为什么不是-tslint"><span>为什么不是 tslint？</span></a></h4><blockquote><p><strong>TSLint is deprecated.</strong></p><p>See this issue for more details: <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpalantir%2Ftslint%2Fissues%2F4534" target="_blank" rel="noopener noreferrer">Roadmap: TSLint → ESLint</a>. If you&#39;re interested in helping with the TSLint/ESLint migration, please check out our <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmedium.com%2Fpalantir%2Ffellowships-for-open-source-developers-3892e6b75ee1" target="_blank" rel="noopener noreferrer">OSS Fellowship</a> program.</p></blockquote><p>这是<code>tslint</code>团队给出的答案，目前推荐使用的是 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ftypescript-eslint%2Ftypescript-eslint" target="_blank" rel="noopener noreferrer">typescript-eslint</a>。</p><h4 id="为项目配置-eslint" tabindex="-1"><a class="header-anchor" href="#为项目配置-eslint"><span>为项目配置 eslint</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 未全局安装的需要全局安装</span></span>
<span class="line"><span>$ npm install eslint -g</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ eslint --init</span></span>
<span class="line"><span>√ How would you like to use ESLint? · style       </span></span>
<span class="line"><span>√ What type of modules does your project use? · commonjs</span></span>
<span class="line"><span>√ Which framework does your project use? · none</span></span>
<span class="line"><span>√ Does your project use TypeScript? · Yes</span></span>
<span class="line"><span>√ Where does your code run? · node</span></span>
<span class="line"><span>√ How would you like to define a style for your project? · guide</span></span>
<span class="line"><span>√ Which style guide do you want to follow? · standard</span></span>
<span class="line"><span>√ What format do you want your config file to be in? · JavaScript</span></span>
<span class="line"><span>Checking peerDependencies of eslint-config-standard@latest</span></span>
<span class="line"><span>Local ESLint installation not found.</span></span>
<span class="line"><span>The config that you&#39;ve selected requires the following dependencies:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@typescript-eslint/eslint-plugin@latest eslint-config-standard@latest eslint@&gt;=7.11.0 eslint-plugin-import@&gt;=2.22.1 eslint-plugin-node@&gt;=11.1.0 eslint-plugin-promise@&gt;=4.2.1 eslint-plugin-standard@&gt;=4.0.2 @typescript-eslint/parser@latest</span></span>
<span class="line"><span>√ Would you like to install them now with npm? · Yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>eslint</code>初始化的步骤还是比较简单易懂的，这里不展开叙述，关键一条：<strong>Does your project use TypeScript? · Yes</strong></p><p>使用<code>eslint</code>命令行初始化后的项目还并没有开启对于<code>ts</code>相关语法的检查，这里需要在<code>.eslintrc.js</code>文件增加两条配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>extends: [</span></span>
<span class="line"><span>  &#39;standard&#39;,</span></span>
<span class="line"><span>  &#39;eslint:recommended&#39;,</span></span>
<span class="line"><span>  &#39;plugin:@typescript-eslint/recommended&#39;</span></span>
<span class="line"><span>]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们会看到<code>ts</code>文件的一堆报错，就可以愉快的安装<code>ts</code>语法进行修改啦！</p><p>提示：<code>ts</code>对于<code>commonjs</code>的模块化语法并没有完全的支持，所以在使用<code>require</code>和<code>module.exports</code>时很容易遇到各种报错，官方也推荐了一些解决方式，这里推荐启用 ES 模块导入模式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;compilerOptions&quot;: {</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>    &quot;esModuleInterop&quot;: true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以在项目中使用 es6 的<code>import</code>和<code>export</code>进行模块化了，<code>ts</code>在编译时会根据环境对我们的代码进行兼容性编译。</p><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结"><span>5. 小结</span></a></h3><p>本文是本人在搭建自己<code>express</code>服务器并集成<code>ts</code>开发时所记录的一些操作，如有错误之处，还请多多指点！</p>`,53),l=[t];function d(p,o){return n(),s("div",null,l)}const h=e(a,[["render",d],["__file","使用TS来编写express服务器简书.html.vue"]]),u=JSON.parse('{"path":"/study/wlong%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8TS%E6%9D%A5%E7%BC%96%E5%86%99express%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E4%B9%A6.html","title":"express +TS 环境搭建","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2022-01-11T00:00:00.000Z","category":["Node.js"],"tag":["Node.js","Express","TypeScript"],"description":"express +TS 环境搭建 1. 前言 作为前端开发人员而言，ts已经成为了一项必不可少的技能，类型检查可以帮助我们再开发时避免一些不必要的 bug，而且ts支持的类和装饰器等语法也更逼近后端语言，更适合服务器的开发。 本文将从零开始，搭建一个集成ts和eslint语法检查的express服务器。 2. 初始化 express 框架 我们可以使用...","head":[["meta",{"property":"og:url","content":"http://www.sxkjxy.cc/ron-blog/study/wlong%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8TS%E6%9D%A5%E7%BC%96%E5%86%99express%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%80%E4%B9%A6.html"}],["meta",{"property":"og:site_name","content":"Ron 个人博客"}],["meta",{"property":"og:title","content":"express +TS 环境搭建"}],["meta",{"property":"og:description","content":"express +TS 环境搭建 1. 前言 作为前端开发人员而言，ts已经成为了一项必不可少的技能，类型检查可以帮助我们再开发时避免一些不必要的 bug，而且ts支持的类和装饰器等语法也更逼近后端语言，更适合服务器的开发。 本文将从零开始，搭建一个集成ts和eslint语法检查的express服务器。 2. 初始化 express 框架 我们可以使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-04T09:55:09.000Z"}],["meta",{"property":"article:author","content":"Mr.Ron"}],["meta",{"property":"article:tag","content":"Node.js"}],["meta",{"property":"article:tag","content":"Express"}],["meta",{"property":"article:tag","content":"TypeScript"}],["meta",{"property":"article:published_time","content":"2022-01-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-04T09:55:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"express +TS 环境搭建\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-04T09:55:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Ron\\",\\"url\\":\\"https://github.com/wuwenlong12/ron-blog\\"}]}"]]},"headers":[{"level":3,"title":"1. 前言","slug":"_1-前言","link":"#_1-前言","children":[]},{"level":3,"title":"2. 初始化 express 框架","slug":"_2-初始化-express-框架","link":"#_2-初始化-express-框架","children":[]},{"level":3,"title":"3. 添加 TS 支持","slug":"_3-添加-ts-支持","link":"#_3-添加-ts-支持","children":[]},{"level":3,"title":"4. 配置 eslint","slug":"_4-配置-eslint","link":"#_4-配置-eslint","children":[]},{"level":3,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[]}],"git":{"createdTime":1728033131000,"updatedTime":1728035709000,"contributors":[{"name":"WuWenlong","email":"7733141621@qq.com","commits":2}]},"readingTime":{"minutes":4.62,"words":1385},"filePathRelative":"study/wlong即时通讯笔记/使用TS来编写express服务器简书.md","localizedDate":"2022年1月11日","excerpt":"\\n<h3>1. 前言</h3>\\n<p>作为前端开发人员而言，<code>ts</code>已经成为了一项必不可少的技能，类型检查可以帮助我们再开发时避免一些不必要的 bug，而且<code>ts</code>支持的类和装饰器等语法也更逼近后端语言，更适合服务器的开发。</p>\\n<p>本文将从零开始，搭建一个集成<code>ts</code>和<code>eslint</code>语法检查的<code>express</code>服务器。</p>\\n<h3>2. 初始化 express 框架</h3>\\n<p>我们可以使用官方提供的<code>express</code>生成器来快速生成<code>express</code>框架。</p>","autoDesc":true}');export{h as comp,u as data};
